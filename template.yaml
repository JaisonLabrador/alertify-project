AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Template para el Sistema de Notificaciones Alertify'

Parameters:
  TOEmail:
    Type: String
    Description: Email address to receive notifications.

Resources:
  # IAM Role para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sns:Publish"
                Resource: "*"

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "Alertify-Inc-ProcessEvents-Unique"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs20.x"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sns = new AWS.SNS();
          const sqs = new AWS.SQS();

          exports.handler = async (event) => {
            console.log("Event received:", JSON.stringify(event, null, 2));

            const deleteParams = {
              Entries: [],
              QueueUrl: process.env.SQS_QUEUE_URL,
            };

            try {
              for (const record of event.Records || []) {
                const messageId = record.messageId;
                const body = JSON.parse(record.body);

                const params = {
                  Message: body.Message || "No Message",
                  Subject: body.Subject || "Alert Notification",
                  TopicArn: process.env.SNS_TOPIC_ARN,
                };

                await sns.publish(params).promise();
                console.log(`Message sent to SNS: ${messageId}`);

                deleteParams.Entries.push({
                  Id: messageId,
                  ReceiptHandle: record.receiptHandle,
                });
              }

              if (deleteParams.Entries.length > 0) {
                await sqs.deleteMessageBatch(deleteParams).promise();
                console.log("Messages deleted from SQS");
              }
            } catch (error) {
              console.error("Error processing messages:", error.message);
              throw error;
            }

            return { statusCode: 200, body: "Messages processed and deleted successfully" };
          };
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
          SQS_QUEUE_URL: !Ref SQSQueue
      Tags:
        - Key: "Project"
          Value: "Alertify-Inc"

  # SQS Queue
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "Alertify-Inc-EventQueue-Unique"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "Alertify-Inc-DLQ"

  # SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Alertify-Inc-CriticalEvents-Unique"

  # SNS Subscription (Email)
  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: "email"
      Endpoint: !Ref TOEmail
      TopicArn: !Ref SNSTopic

  # SNS Subscription to SQS with Filtering
  SNSQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt SQSQueue.Arn
      FilterPolicy:
        EventType:
          - Critical

  # SQS Access Policy for SNS
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

  # Event Source Mapping SQS -> Lambda
  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn