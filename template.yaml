AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Template para el Sistema de Notificaciones Alertify'

Parameters:
  TOEmail:
    Type: String
    Description: Email address to receive notifications.

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sns:Publish"
                Resource: "*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Alertify-Inc-ProcessEvents-Unique"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs20.x"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sns = new AWS.SNS();
          const processedMessages = new Set();

          exports.handler = async (event) => {
            console.log("Event received:", JSON.stringify(event, null, 2));

            for (const record of event.Records || []) {
              const messageId = record.messageId;
              const body = JSON.parse(record.body);

              // Evita duplicados usando Set
              if (processedMessages.has(messageId)) {
                console.log(`Duplicate message ignored: ${messageId}`);
                continue;
              }

              processedMessages.add(messageId);

              // Reenv√≠a todos los mensajes a SNS
              const params = {
                Message: body.Message,
                Subject: body.Subject || "No Subject",
                TopicArn: process.env.SNS_TOPIC_ARN,
              };

              try {
                await sns.publish(params).promise();
                console.log(`Message sent to SNS: ${messageId}`);
              } catch (error) {
                console.error(`Error publishing to SNS: ${error.message}`);
              }
            }

            return { statusCode: 200, body: "Messages processed successfully" };
          };
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      Tags:
        - Key: "Project"
          Value: "Alertify-Inc"

  SQSEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  SQSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "Alertify-Inc-EventQueue-Unique"

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "Alertify-Inc-CriticalEvents-Unique"

  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: "email"
      Endpoint: !Ref TOEmail
      TopicArn: !Ref SNSTopic