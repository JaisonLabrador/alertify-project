AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template for ElastiCache Redis and Required Resources

Resources:
  # Security Group for Redis
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis cluster
      VpcId: !Sub "${AWS::StackName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  # Redis Subnet Group
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cluster
      SubnetIds:
        - subnet-12345678 # Replace with your subnet IDs
        - subnet-87654321 # Replace with your subnet IDs

  # ElastiCache Redis Cluster
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      ClusterName: RedisCluster
      VpcSecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      EngineVersion: "6.x"
      Tags:
        - Key: Name
          Value: RedisCluster

  # Lambda Function IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSAndSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessageBatch"
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:YourQueueName"
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:YourTopicName"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MySQSProcessor
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket: your-code-bucket
        S3Key: your-code-key.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/YourQueueName"
          SNS_TOPIC_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:YourTopicName"
          REDIS_HOST: !GetAtt RedisCluster.ConfigurationEndpoint.Address
          REDIS_PORT: "6379"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt RedisSecurityGroup.GroupId
        SubnetIds:
          - subnet-12345678
          - subnet-87654321

Outputs:
  RedisClusterEndpoint:
    Description: Endpoint for the Redis cluster
    Value: !GetAtt RedisCluster.ConfigurationEndpoint.Address
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt MyLambdaFunction.Arn